// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var RepoItem = require("./RepoItem.cjs");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var ReactRelay = require("react-relay");
var RescriptRelay = require("rescript-relay/src/RescriptRelay.cjs");
var Js_null_undefined = require("rescript/lib/js/js_null_undefined.js");
var RescriptRelay_Internal = require("rescript-relay/src/RescriptRelay_Internal.cjs");
var SearchView_query_graphql = require("../__generated__/SearchView_query_graphql.cjs");
var SearchViewRefetchQuery_graphql = require("../__generated__/SearchViewRefetchQuery_graphql.cjs");

var getConnectionNodes = SearchView_query_graphql.Utils.getConnectionNodes;

function internal_makeRefetchableFnOpts(fetchPolicy, onComplete, param) {
  var tmp = {};
  var tmp$1 = RescriptRelay.mapFetchPolicy(fetchPolicy);
  if (tmp$1 !== undefined) {
    tmp.fetchPolicy = Caml_option.valFromOption(tmp$1);
  }
  var tmp$2 = RescriptRelay_Internal.internal_nullableToOptionalExnHandler(onComplete);
  if (tmp$2 !== undefined) {
    tmp.onComplete = Caml_option.valFromOption(tmp$2);
  }
  return tmp;
}

function useRefetchable(fRef) {
  var match = ReactRelay.useRefetchableFragment(SearchView_query_graphql.node, fRef);
  var refetchFn = match[1];
  var data = RescriptRelay_Internal.internal_useConvertedValue(SearchView_query_graphql.Internal.convertFragment, match[0]);
  return [
          data,
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return Curry._2(refetchFn, RescriptRelay_Internal.internal_removeUndefinedAndConvertNullsRaw(SearchViewRefetchQuery_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [refetchFn])
        ];
}

function use(fRef) {
  var data = ReactRelay.useFragment(SearchView_query_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(SearchView_query_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = ReactRelay.useFragment(SearchView_query_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return SearchView_query_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

function usePagination(fr) {
  var p = ReactRelay.usePaginationFragment(SearchView_query_graphql.node, fr);
  var data = RescriptRelay_Internal.internal_useConvertedValue(SearchView_query_graphql.Internal.convertFragment, p.data);
  return {
          data: data,
          loadNext: React.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadNext(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadNext]),
          loadPrevious: React.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadPrevious(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadPrevious]),
          hasNext: p.hasNext,
          hasPrevious: p.hasPrevious,
          isLoadingNext: p.isLoadingNext,
          isLoadingPrevious: p.isLoadingPrevious,
          refetch: React.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return p.refetch(RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(SearchViewRefetchQuery_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [p.refetch])
        };
}

function useBlockingPagination(fRef) {
  var p = ReactRelay.useBlockingPaginationFragment(SearchView_query_graphql.node, fRef);
  var data = RescriptRelay_Internal.internal_useConvertedValue(SearchView_query_graphql.Internal.convertFragment, p.data);
  return {
          data: data,
          loadNext: React.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadNext(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadNext]),
          loadPrevious: React.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadPrevious(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadPrevious]),
          hasNext: p.hasNext,
          hasPrevious: p.hasPrevious,
          refetch: React.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return p.refetch(RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(SearchViewRefetchQuery_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [p.refetch])
        };
}

var makeRefetchVariables = SearchViewRefetchQuery_graphql.Types.makeRefetchVariables;

var Fragment = {
  getConnectionNodes: getConnectionNodes,
  Types: undefined,
  internal_makeRefetchableFnOpts: internal_makeRefetchableFnOpts,
  useRefetchable: useRefetchable,
  Operation: undefined,
  use: use,
  useOpt: useOpt,
  usePagination: usePagination,
  useBlockingPagination: useBlockingPagination,
  makeRefetchVariables: makeRefetchVariables
};

function SearchView(Props) {
  var fragmentRef = Props.fragmentRef;
  var match = usePagination(fragmentRef);
  var isLoadingNext = match.isLoadingNext;
  var loadNext = match.loadNext;
  var repos = Curry._1(getConnectionNodes, match.data.search);
  return React.createElement(React.Fragment, undefined, React.createElement("dl", {
                  className: "flex flex-col gap-4 flex-1 items-stretch overflow-y-auto"
                }, Belt_Array.map(repos, (function (repo) {
                        if (typeof repo !== "object") {
                          return null;
                        }
                        if (repo.NAME !== "Repository") {
                          return null;
                        }
                        var repo$1 = repo.VAL;
                        return React.createElement(RepoItem.make, {
                                    fragmentRef: repo$1.fragmentRefs,
                                    key: repo$1.id
                                  });
                      }))), match.hasNext ? React.createElement("button", {
                    className: "my-2 p-2 rounded bg-gray-300 hover:bg-gray-200 opacity-100 disabled-opacity-60 transition-colors transition-opacity duration-300",
                    disabled: isLoadingNext,
                    onClick: (function (param) {
                        Curry._3(loadNext, 10, undefined, undefined);
                        
                      })
                  }, isLoadingNext ? "Loading..." : "Load More") : null);
}

var make = SearchView;

exports.Fragment = Fragment;
exports.make = make;
/* react Not a pure module */
