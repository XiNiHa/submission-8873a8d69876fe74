// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Caml_option = require("rescript/lib/js/caml_option.js");
var ReactRelay = require("react-relay");
var RelayRuntime = require("relay-runtime");
var Js_null_undefined = require("rescript/lib/js/js_null_undefined.js");
var RescriptRelay_Internal = require("rescript-relay/src/RescriptRelay_Internal.cjs");
var RepoItem_repository_graphql = require("../__generated__/RepoItem_repository_graphql.cjs");
var RepoItem_AddStarMutation_graphql = require("../__generated__/RepoItem_AddStarMutation_graphql.cjs");
var RepoItem_RemoveStarMutation_graphql = require("../__generated__/RepoItem_RemoveStarMutation_graphql.cjs");

function use(fRef) {
  var data = ReactRelay.useFragment(RepoItem_repository_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(RepoItem_repository_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = ReactRelay.useFragment(RepoItem_repository_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return RepoItem_repository_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment_repositoryVisibility_decode = RepoItem_repository_graphql.Utils.repositoryVisibility_decode;

var Fragment_repositoryVisibility_fromString = RepoItem_repository_graphql.Utils.repositoryVisibility_fromString;

var Fragment = {
  repositoryVisibility_decode: Fragment_repositoryVisibility_decode,
  repositoryVisibility_fromString: Fragment_repositoryVisibility_fromString,
  Types: undefined,
  Operation: undefined,
  use: use,
  useOpt: useOpt
};

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: RepoItem_AddStarMutation_graphql.node,
              variables: RepoItem_AddStarMutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, RepoItem_AddStarMutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? RepoItem_AddStarMutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, RepoItem_AddStarMutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$1(param) {
  var match = ReactRelay.useMutation(RepoItem_AddStarMutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, RepoItem_AddStarMutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? RepoItem_AddStarMutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, RepoItem_AddStarMutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: RepoItem_AddStarMutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var AddStarMutation = {
  Operation: undefined,
  Types: undefined,
  commitMutation: commitMutation,
  use: use$1
};

function commitMutation$1(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: RepoItem_RemoveStarMutation_graphql.node,
              variables: RepoItem_RemoveStarMutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, RepoItem_RemoveStarMutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? RepoItem_RemoveStarMutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, RepoItem_RemoveStarMutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$2(param) {
  var match = ReactRelay.useMutation(RepoItem_RemoveStarMutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, RepoItem_RemoveStarMutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? RepoItem_RemoveStarMutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, RepoItem_RemoveStarMutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: RepoItem_RemoveStarMutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var RemoveStarMutation = {
  Operation: undefined,
  Types: undefined,
  commitMutation: commitMutation$1,
  use: use$2
};

function RepoItem(Props) {
  var fragmentRef = Props.fragmentRef;
  var data = use(fragmentRef);
  var match = use$1(undefined);
  var addStar = match[0];
  var match$1 = use$2(undefined);
  var removeStar = match$1[0];
  var isMutating = match[1] || match$1[1];
  return React.createElement("div", {
              className: "flex flex-col"
            }, React.createElement("dt", {
                  className: "flex items-center"
                }, React.createElement("a", {
                      className: "text-lg font-medium hover:underline",
                      href: data.url
                    }, data.nameWithOwner), data.visibility === "PRIVATE" ? React.createElement("div", {
                        className: "mx-1 i-bi-lock-fill"
                      }) : null), React.createElement("dd", undefined, React.createElement("p", {
                      dangerouslySetInnerHTML: {
                        __html: data.descriptionHTML
                      }
                    }), React.createElement("button", {
                      className: "relative px-2 py-1 text-sm rounded bg-gray-300 hover:bg-gray-200 flex items-center gap-2 tabular-nums " + (
                        isMutating ? "opacity-70" : "opacity-100"
                      ) + " transition-opacity duration-300",
                      onClick: (function (param) {
                          if (data.viewerHasStarred) {
                            Curry.app(removeStar, [
                                  undefined,
                                  undefined,
                                  undefined,
                                  {
                                    removeStar: {
                                      starrable: {
                                        __typename: "Repository",
                                        id: data.id,
                                        stargazers: {
                                          totalCount: data.stargazers.totalCount - 1 | 0
                                        },
                                        viewerHasStarred: false
                                      }
                                    }
                                  },
                                  undefined,
                                  undefined,
                                  {
                                    input: {
                                      starrableId: data.id
                                    }
                                  },
                                  undefined,
                                  undefined
                                ]);
                          } else {
                            Curry.app(addStar, [
                                  undefined,
                                  undefined,
                                  undefined,
                                  {
                                    addStar: {
                                      starrable: {
                                        __typename: "Repository",
                                        id: data.id,
                                        stargazers: {
                                          totalCount: data.stargazers.totalCount + 1 | 0
                                        },
                                        viewerHasStarred: true
                                      }
                                    }
                                  },
                                  undefined,
                                  undefined,
                                  {
                                    input: {
                                      starrableId: data.id
                                    }
                                  },
                                  undefined,
                                  undefined
                                ]);
                          }
                          
                        })
                    }, React.createElement("div", {
                          className: "i-bi-star-fill " + (
                            data.viewerHasStarred ? "bg-black" : "bg-white"
                          ) + " transition-colors duration-300"
                        }), String(data.stargazers.totalCount))));
}

var make = RepoItem;

exports.Fragment = Fragment;
exports.AddStarMutation = AddStarMutation;
exports.RemoveStarMutation = RemoveStarMutation;
exports.make = make;
/* react Not a pure module */
