// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var SearchView = require("./components/SearchView.cjs");
var Caml_option = require("rescript/lib/js/caml_option.js");
var ReactRelay = require("react-relay");
var RescriptRelay = require("rescript-relay/src/RescriptRelay.cjs");
var RelayRuntime = require("relay-runtime");
var IndexQuery_graphql = require("./__generated__/IndexQuery_graphql.cjs");
var RescriptRelay_Internal = require("rescript-relay/src/RescriptRelay_Internal.cjs");

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = ReactRelay.useLazyLoadQuery(IndexQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(IndexQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(IndexQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = ReactRelay.useQueryLoader(IndexQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, IndexQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  ReactRelay.fetchQuery(environment, IndexQuery_graphql.node, IndexQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: IndexQuery_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = ReactRelay.fetchQuery(environment, IndexQuery_graphql.node, IndexQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(IndexQuery_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded(queryRef, param) {
  var data = ReactRelay.usePreloadedQuery(IndexQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(IndexQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(IndexQuery_graphql.node, IndexQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query = {
  Operation: undefined,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function Index(Props) {
  var match = React.useState(function () {
        return "";
      });
  var setQuery = match[1];
  var query = match[0];
  var match$1 = React.useState(function () {
        return true;
      });
  var setInputDisabled = match$1[1];
  var data = use({
        query: query,
        queryNotBlank: query.length > 0
      }, undefined, undefined, undefined, undefined);
  React.useEffect((function () {
          Curry._1(setInputDisabled, (function (param) {
                  return false;
                }));
          
        }), []);
  return React.createElement("div", {
              className: "flex flex-col gap-4 h-full justify-center items-center"
            }, React.createElement("div", {
                  className: "i-bi-github"
                }), React.createElement("span", {
                  className: "text-2xl"
                }, "Logged in as " + data.viewer.login), React.createElement("input", {
                  className: "rounded border border-gray-500 px-4 py-2 w-64",
                  disabled: match$1[0],
                  type: "text",
                  value: query,
                  onChange: (function (e) {
                      return Curry._1(setQuery, (function (param) {
                                    return e.target.value;
                                  }));
                    })
                }), React.createElement("div", {
                  className: "flex-1 flex flex-col justify-center items-stretch self-stretch max-h-[50vh] mx-4 p-2 rounded border border-gray-300"
                }, React.createElement(React.Suspense, {
                      children: React.createElement(SearchView.make, {
                            fragmentRef: data.fragmentRefs
                          }),
                      fallback: React.createElement("div", {
                            className: "text-center"
                          }, "Loading...")
                    })));
}

var make = Index;

exports.Query = Query;
exports.make = make;
/* react Not a pure module */
